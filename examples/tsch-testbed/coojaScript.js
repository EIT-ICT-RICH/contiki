//load("nashorn:mozilla_compat.js");
importPackage(java.lang);
importPackage(java.util);
importPackage(java.io);

var timeSlice = 5 * 60 * 1000; //5 min in ms
var step = 2;
var i = 0;
var j = 0;

//50min*60sec*1000ms
TIMEOUT(3000000);
log.log(time + "\tID:1\t" + "COOJA: Script started.\n");

function setupEdges(mySim, myNetwork, numberOfNodes) {
	var radioMedium = mySim.getRadioMedium();
	if (radioMedium != null) {
		radioMedium.clearEdges();

		for (i = 0; i < numberOfNodes; i++) {
			var srcRadio = mySim.getMoteWithID(i + 1).getInterfaces().getRadio();
			for (j = 0; j < numberOfNodes; j++) {
				var weight = myNetwork[j * numberOfNodes + i];
				if (i == j || weight == 0) {
					continue;
				}
				var ratio = weight;
				var dstRadio = mySim.getMoteWithID(j + 1).getInterfaces().getRadio();
				var superDest = new org.contikios.cooja.radiomediums.DGRMDestinationRadio(
						dstRadio);
				superDest.ratio = ratio;
				var edge = new org.contikios.cooja.radiomediums.DirectedGraphMedium.Edge(
						srcRadio, superDest);
				radioMedium.addEdge(edge);
			}
		}

		printEdges();
		log.log(time + "\tID:1\t" + "COOJA: Script finished setting weights.\n");
	}
}

function printEdges() {
	var radioMedium = sim.getRadioMedium();
	if (radioMedium != null) {
		radios = radioMedium.getRegisteredRadios();
		edges = radioMedium.getEdges();
		if (edges != null) {
			log.log(time + "\tID:1\t" + "COOJA: Edges:\n");
			for (i = 0; i < edges.length; i++) {
				str = java.lang.String
						.format("%d\tID:1\tCOOJA: %d -> %d, ratio: %.2f\n",
								 new java.lang.Integer(time), new java.lang.Integer(edges[i].source.getMote()
										.getID()), new java.lang.Integer(
										edges[i].superDest.radio.getMote()
												.getID()), new java.lang.Float(
										edges[i].superDest.ratio));
				log.log(str);
			}
		}
	}
}

function ShuffleArray(array) {
	var index, i;
	var numNodes = array.length + 1;
	for (i = 2; i <= numNodes; i++) { //fill with IDs 2..N
		array[i - 2] = i;
	}
	var random = new java.util.Random();
	random.setSeed(sim.getRandomSeed());
	for (i = array.length - 1; i > 0; i--) {
		index = random.nextInt(i + 1);
		if (index != i) { //swap
			array[index] ^= array[i];
			array[i] ^= array[index];
			array[index] ^= array[i];
		}
	}
}

var myNetwork = [ 0.000000, 0.990354, 0.932476, 0.932476, 0.951768, 0.881029,
		0.610932, 0.832797, 0.765273, 0.807074, 0.176849, 0.347267, 0.749196,
		0.363344, 0.639871, 0.495177, 0.041801, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.967846, 0.000000,
		0.929260, 0.900322, 0.913183, 0.874598, 0.874598, 0.816720, 0.819936,
		0.861736, 0.861736, 0.800643, 0.945338, 0.025723, 0.884244, 0.790997,
		0.916399, 0.668810, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.877814, 0.845659, 0.000000, 0.864952, 0.800643,
		0.832797, 0.784566, 0.000000, 0.000000, 0.000000, 0.000000, 0.807074,
		0.138264, 0.000000, 0.109325, 0.000000, 0.003215, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.964630,
		0.890675, 0.877814, 0.000000, 0.845659, 0.852090, 0.932476, 0.909968,
		0.787781, 0.858521, 0.881029, 0.787781, 0.717042, 0.765273, 0.877814,
		0.260450, 0.379421, 0.109325, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.974277, 0.893891, 0.971061, 0.881029,
		0.000000, 0.871383, 0.935691, 0.823151, 0.871383, 0.881029, 0.832797,
		0.855305, 0.816720, 0.855305, 0.662379, 0.765273, 0.938907, 0.324759,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.977492, 0.961415, 0.993569, 0.977492, 0.971061, 0.000000, 0.993569,
		0.987138, 0.942122, 0.990354, 0.974277, 0.958199, 0.932476, 0.919614,
		0.942122, 0.948553, 0.980707, 0.549839, 0.205788, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.620579, 0.852090, 0.884244,
		0.900322, 0.913183, 0.893891, 0.000000, 0.961415, 0.803859, 0.890675,
		0.938907, 0.993569, 0.971061, 0.897106, 0.996785, 0.993569, 0.993569,
		0.967846, 0.215434, 0.016077, 0.054662, 0.003215, 0.000000, 0.000000,
		0.000000, 0.852090, 0.787781, 0.112540, 0.919614, 0.440514, 0.890675,
		0.938907, 0.000000, 0.993569, 0.996785, 0.996785, 0.971061, 0.729904,
		0.993569, 0.945338, 0.334405, 0.463023, 0.138264, 0.308682, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.745981, 0.745981,
		0.012862, 0.810289, 0.627010, 0.729904, 0.745981, 0.993569, 0.000000,
		0.945338, 0.996785, 0.964630, 0.996785, 0.996785, 0.668810, 0.971061,
		0.942122, 0.218650, 0.054662, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.810289, 0.813505, 0.038585, 0.855305, 0.845659,
		0.855305, 0.871383, 0.996785, 0.996785, 0.000000, 0.996785, 0.848875,
		0.993569, 0.948553, 0.762058, 0.816720, 0.617363, 0.073955, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.115756,
		0.784566, 0.003215, 0.906752, 0.430868, 0.826367, 0.900322, 1.000000,
		1.000000, 0.958199, 0.000000, 0.864952, 0.922830, 1.000000, 0.954984,
		0.980707, 0.778135, 0.051447, 0.620579, 0.032154, 0.000000, 0.276527,
		0.000000, 0.000000, 0.000000, 0.379421, 0.758842, 0.897106, 0.858521,
		0.758842, 0.877814, 0.938907, 0.938907, 0.971061, 0.855305, 0.874598,
		0.000000, 0.996785, 0.974277, 0.996785, 0.996785, 0.996785, 0.987138,
		0.633441, 0.450161, 0.749196, 0.218650, 0.000000, 0.000000, 0.000000,
		0.649518, 0.787781, 0.700965, 0.745981, 0.598071, 0.742765, 0.864952,
		0.758842, 0.980707, 0.852090, 0.906752, 0.987138, 0.000000, 0.932476,
		0.996785, 0.996785, 0.996785, 0.987138, 0.887460, 0.726688, 0.790997,
		0.800643, 0.093248, 0.000000, 0.000000, 0.199357, 0.022508, 0.000000,
		0.771704, 0.418006, 0.739550, 0.884244, 0.996785, 0.990354, 0.916399,
		0.996785, 0.926045, 0.958199, 0.000000, 0.990354, 0.996785, 0.996785,
		0.990354, 0.819936, 0.517685, 0.144695, 0.122186, 0.000000, 0.000000,
		0.000000, 0.546624, 0.790997, 0.752412, 0.868167, 0.318328, 0.797428,
		0.906752, 0.887460, 0.678457, 0.710611, 0.877814, 0.990354, 0.993569,
		0.987138, 0.000000, 0.990354, 0.990354, 0.983923, 0.813505, 0.958199,
		0.929260, 0.916399, 0.733119, 0.212219, 0.003215, 0.353698, 0.591640,
		0.122186, 0.295820, 0.350482, 0.762058, 0.945338, 0.344051, 0.922830,
		0.800643, 0.909968, 0.974277, 0.996785, 0.993569, 0.996785, 0.000000,
		0.996785, 0.987138, 0.987138, 0.987138, 0.990354, 0.964630, 0.649518,
		0.000000, 0.260450, 0.019293, 0.768489, 0.228296, 0.344051, 0.601286,
		0.784566, 0.864952, 0.401929, 0.874598, 0.491961, 0.694534, 0.990354,
		0.993569, 0.996785, 0.993569, 0.996785, 0.000000, 0.996785, 0.832797,
		0.948553, 0.980707, 0.816720, 0.697749, 0.000000, 0.003215, 0.000000,
		0.617363, 0.000000, 0.141479, 0.135048, 0.379421, 0.816720, 0.170418,
		0.340836, 0.090032, 0.045016, 0.909968, 0.993569, 0.903537, 0.993569,
		0.993569, 0.996785, 0.000000, 0.890675, 0.996785, 0.996785, 0.983923,
		0.951768, 0.964630, 0.954984, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.086817, 0.157556, 0.196141, 0.077170, 0.000000, 0.607717,
		0.508039, 0.961415, 0.893891, 0.916399, 0.993569, 0.980707, 0.987138,
		0.000000, 0.996785, 0.996785, 0.967846, 0.974277, 0.723473, 0.668810,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.006431, 0.022508,
		0.000000, 0.000000, 0.000000, 0.057878, 0.385852, 0.691318, 0.633441,
		0.971061, 0.996785, 0.996785, 0.996785, 0.996785, 0.000000, 0.996785,
		0.996785, 0.971061, 0.906752, 0.932476, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.038585, 0.000000, 0.000000, 0.000000,
		0.003215, 0.768489, 0.790997, 0.180064, 0.961415, 0.990354, 0.993569,
		0.996785, 0.996785, 0.996785, 0.000000, 0.990354, 0.993569, 0.948553,
		0.977492, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.276527, 0.157556, 0.765273,
		0.202572, 0.909968, 0.987138, 0.903537, 0.980707, 0.900322, 0.993569,
		0.996785, 0.000000, 0.987138, 0.893891, 0.906752, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.086817, 0.000000, 0.874598, 0.762058,
		0.855305, 0.961415, 0.961415, 0.971061, 0.996785, 0.993569, 0.000000,
		0.996785, 0.974277, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.218650, 0.000000, 0.000000, 0.987138, 0.829582,
		0.897106, 0.935691, 0.980707, 0.996785, 0.000000, 0.990354, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.006431,
		0.408360, 0.019293, 0.977492, 0.707395, 0.916399, 0.987138, 0.958199,
		0.967846, 1.000000, 0.000000 ];

var numberOfNodes = Math.sqrt(myNetwork.length);

//setup edges (dgm links)         
setupEdges(sim, myNetwork, numberOfNodes);

//Shuffle IDs of motes to be attenuated
var shuffledIDs = new Array(numberOfNodes - 1);
ShuffleArray(shuffledIDs);

attenuatedMotesString = time + "\tID:1\t" + "COOJA: Attenuated motes: ";
for (i = 0; i < shuffledIDs.length; i++) {
	attenuatedMotesString = attenuatedMotesString + shuffledIDs[i] + ", ";
}
attenuatedMotesString = attenuatedMotesString + "\n";
log.log(attenuatedMotesString);

//if (1) 
{
	//open log file
	date = new Date();
	df = new java.text.SimpleDateFormat("dd_MM_yyyy_HH.mm.ss");
	dateStr = df.format(date);
	path = "\/home\/beshr\/work\/contiki-private\/examples\/tsch-testbed\/imgs"; //sim.getCooja().getLastOpenedFile().getParent();
	logFileName = path + "\/log_" + sim.getTitle() + "_" + dateStr + ".txt";
	logMsg=time + "\tID:1\tCOOJA: Logging to: " + logFileName + "\n"
	log.log(logMsg);
	log.log(time + "\tID:1\tCOOJA: Date: " + dateStr + "\n");
	log.append(logFileName, attenuatedMotesString);

	while (true) {
		logMsg = time + "\tID:" + mote.getID() + "\t" + msg + "\n";
		//log.log(logMsg);
		log.append(logFileName, logMsg);

		//manipulate the rx links of a random node
		if (((time / 1000) > step * timeSlice) && step < shuffledIDs.length) {
			//manipulate 3 nodes at a time
			for(j = step - 2; j < step-2 + 3; j++) {
				var myId = shuffledIDs[j];
				var dstRadio = sim.getMoteWithID(myId).getInterfaces().getRadio();
				var radioMedium = sim.getRadioMedium();
				var edges = radioMedium.getEdges();
				var edge;
				for (i = 0; i < edges.length; i++) {
					edge = edges[i];
					if (edge.superDest.radio == dstRadio) {
						oldRatio = edge.superDest.ratio;
						edge.superDest.ratio *= 0.1;
						logMsg = java.lang.String
								.format(
										"%d\tID:%d\tCOOJA: -> %d, ratio: %.2f, was: %.2f\n",
										 new java.lang.Long(time), new Integer(
												edge.source.getMote().getID()),
										new Integer(edge.superDest.radio.getMote()
												.getID()), new Float(
												edge.superDest.ratio), new Float(
												oldRatio));
						log.log(logMsg);
						log.append(logFileName, logMsg);
					}
				}
			}
			radioMedium.requestEdgeAnalysis(); //update medium
			step++;
		}
		YIELD();
	}
}
